# -*- mode: conf -*-
# lf commands file

# How to open files
cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$f";;
        *) xdg-open "$f" ;;
    esac
}}

#########################
#   FZF functions       #
#########################

# search
cmd fzf ${{
	DIR=$(fd -t d | fzf)
	[ -z "$DIR" ] || lf -remote "send $id cd '$DIR'"
}}

# search home
cmd fzf-home ${{
	DIR=$(fd -t d . "$HOME" | fzf)
	[ -z "$DIR" ] || lf -remote "send $id cd '$DIR'"
}}

# find file to edit
cmd fzf-edit ${{
	FILES=$(fd -t f | fzf)
	[ -z "$FILES" ] || "$EDITOR" "$FILES"
}}

# search in the files
cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

# jump to a file or directory
cmd fzf_jump ${{
    res="$(find . -maxdepth 1 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}

#########################
#   trash functions     #
#########################

# send file to trash
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

# empty trash can
cmd clear_trash %trash-empty

# restore files
cmd restore_trash ${{
  trash-restore
}}

#########################
#   Other functions     #
#########################

# Set wallpaper
cmd setwallpaper ${{
  echo "$f" > ~/.config/wall
  xwallpaper --stretch "$f"
}}

# Create dirs
cmd mkdir %{{
	printf "mkdir: "
  read -r DIR
	mkdir -p "$DIR"
	echo "Successfully created dir: $DIR"
}}

# create file
cmd mkfile %{{
  printf "File Name: "
  read -r FILE
  touch $FILE 
  echo "Successfully created file: $FILE"
}}

# create file as root
cmd sudomkfile %{{
  printf "File Name: "
  read FILE
  sudo touch $FILE
}}

# edit file as root
cmd sudoedit ${{
    sudo $EDITOR "$f"
}}

# decompress files
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

# compress files
cmd zip %zip -rj  "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"

# change file permissions
cmd chmod %{{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}
